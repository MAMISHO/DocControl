// Generated by CoffeeScript 1.3.3

describe("widgets.Form", function() {
  beforeEach(function() {
    this.schema = {
      name: "name",
      field: "CharField",
      maxLength: 40,
      widget: {
        label: "Name"
      }
    };
    this.val = "hello world";
    return this.form = new widgets.Form({
      schema: this.schema
    });
  });
  it("should create a widget and a field given a schema", function() {
    expect(this.form.fields instanceof fields.Field).toBe(true);
    return expect(this.form.widgets instanceof widgets.Widget).toBe(true);
  });
  it("should set widget and field parentWidget/parent to the form", function() {
    expect(this.form.fields.parent).toBe(this.form);
    return expect(this.form.widgets.parentWidget).toBe(this.form);
  });
  it("should be able to get a field by path", function() {
    return expect(this.form.getField('').name).toEqual("name");
  });
  it("should be able to get a widget by path", function() {
    return expect(this.form.getWidget('').fieldName).toEqual("name");
  });
  it("should be able to set the field value", function() {
    this.form.setValue("hello world");
    return this.expect(this.form.getValue()).toEqual("hello world");
  });
  it("should listen for value changes to the fields and send to the widgets.", function() {
    spyOn(this.form, "onFieldValueChanged").andCallThrough();
    this.form.setValue('hello world');
    return expect(this.form.onFieldValueChanged).toHaveBeenCalled();
  });
  return it("should set value of both widget and field when initial value provided", function() {
    var schema;
    schema = enyo.clone(this.schema);
    console.log(schema);
    this.form = new widgets.Form({
      schema: this.schema,
      value: this.val
    });
    console.log(1);
    return expect(this.form.getValue()).toBe("hello world");
  });
});
